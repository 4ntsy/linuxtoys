# library of helpers and repository checkers

# Flatpak check
flatpak_in_lib () {
    if [ -f /tmp/linuxtoys_flatpak_done ]; then
        return 0
    fi
    # Install flatpak if not present
    if ! command -v flatpak &> /dev/null; then
        sudo_rq
        if [[ "$ID_LIKE" == *debian* ]] || [[ "$ID_LIKE" == *ubuntu* ]] || [ "$ID" == "debian" ] || [ "$ID" == "ubuntu" ]; then
            if ! sudo apt install -y flatpak; then
                echo "Failed to install flatpak via apt"
                return 1
            fi
        elif [[ "$ID" =~ ^(arch|cachyos)$ ]] || [[ "$ID_LIKE" == *arch* ]] || [[ "$ID_LIKE" == *archlinux* ]]; then
            if ! sudo pacman -S --noconfirm flatpak; then
                echo "Failed to install flatpak via pacman"
                return 1
            fi
        else
            echo "Unsupported distribution for automatic flatpak installation"
            return 1
        fi
        sleep 1
    fi
    # Add Flathub remote for user
    if ! flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo --user 2>/dev/null; then
        echo "Warning: Failed to add Flathub remote for user"
    fi
    # Add Flathub remote system-wide (may fail without proper permissions)
    if ! sudo flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo --system 2>/dev/null; then
        echo "Note: Could not add Flathub remote system-wide (this is normal for user-only installations)"
    fi
    # Verify at least one remote was added successfully
    if ! flatpak remotes --user | grep -q "flathub" && ! flatpak remotes --system | grep -q "flathub" 2>/dev/null; then
        echo "Error: Failed to add Flathub remote"
        return 1
    fi
    echo "Flatpak and Flathub setup completed successfully"
    if [ -n "$LINUXTOYS_CHECKLIST" ]; then
        touch /tmp/linuxtoys_flatpak_done
    fi
    return 0
}

# Multilib repository check
multilib_chk () {
    # Check if multilib is already enabled (uncommented)
    pacman -Slq multilib >&- && {
        echo "Multilib repository is already enabled."
        return 0
    } || {
        # Enabling multilib repository in /etc/pacman.conf
        printf "\n[multilib]\nInclude = /etc/pacman.d/mirrorlist\n" | sudo tee -a /etc/pacman.conf
        (
            sudo pacman -Syy &&
            pacman -Slq multilib >&-
        ) && {
            echo "Multilib repository enabled successfully."
            return 0
        } || {
            echo "Failed to enable multilib repository. Please check /etc/pacman.conf manually."
            return 1
        }
    }
}

# Chaotic AUR check
chaotic_aur_lib () {
    if [[ "$ID" =~ ^(arch|cachyos)$ ]] || [[ "$ID_LIKE" =~ (arch|archlinux) ]]; then
        pacman -Slq chaotic-aur >&- || {
            # Remove possible previous setup
            sudo sed -i '/\[chaotic-aur\]/,/Include = \/etc\/pacman.d\/chaotic-mirrorlist/ d' /etc/pacman.conf
            # Get keys and add in keyring
            (
                sudo pacman-key --recv-key 3056513887B78AEB --keyserver keyserver.ubuntu.com &&
                sudo pacman-key --lsign-key 3056513887B78AEB
            ) && {
                # Install chaotic-keyring and chaotic-mirrorlist packages
                (
                    sudo pacman -U --noconfirm 'https://cdn-mirror.chaotic.cx/chaotic-aur/chaotic-keyring.pkg.tar.zst' &&
                    sudo pacman -U --noconfirm 'https://cdn-mirror.chaotic.cx/chaotic-aur/chaotic-mirrorlist.pkg.tar.zst'
                ) && {
                    # Enable chaotic-aur repository
                    printf "\n[chaotic-aur]\nInclude = /etc/pacman.d/chaotic-mirrorlist\n" | sudo tee -a /etc/pacman.conf
                    # Update cache and check if chaotic-aur was added successfully
                    (
                        sudo pacman -Syy &&
                        pacman -Slq chaotic-aur >&-
                    ) && {
                        zeninf "$msg024"
                    } || { fatal "Failed to setup chaotic-aur on your system"; }
                } || { fatal "Failed to install chaotic-keyring and chaotic-mirrorlist"; }
            } || { fatal "Failed to add keys to keyring"; }
        }
    else
        fatal "$msg077"
    fi
}

# RPMFusion check
rpmfusion_chk () {
    local fedora_version
    if ! fedora_version=$(rpm -E %fedora 2>/dev/null) || [ "$fedora_version" = "%fedora" ]; then
        echo "Error: Could not determine Fedora version"
        return 1
    fi
    
    # Install RPMFusion Free
    if ! rpm -qi "rpmfusion-free-release" &>/dev/null; then
        echo "Installing RPMFusion Free repository..."
        local free_url="https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-${fedora_version}.noarch.rpm"  
        if ! command -v rpm-ostree >/dev/null 2>&1; then
            if ! sudo dnf install -y "$free_url"; then
                echo "Error: Failed to install RPMFusion Free repository"
                return 1
            fi
        else
            if ! sudo rpm-ostree install -yA "$free_url"; then
                echo "Error: Failed to install RPMFusion Free repository via rpm-ostree"
                return 1
            fi
        fi
        echo "RPMFusion Free repository installed successfully"
    else
        echo "RPMFusion Free repository is already installed"
    fi
    
    # Install RPMFusion Non-Free
    if ! rpm -qi "rpmfusion-nonfree-release" &>/dev/null; then
        echo "Installing RPMFusion Non-Free repository..."
        local nonfree_url="https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-${fedora_version}.noarch.rpm"   
        if ! command -v rpm-ostree >/dev/null 2>&1; then
            if ! sudo dnf install -y "$nonfree_url"; then
                echo "Error: Failed to install RPMFusion Non-Free repository"
                return 1
            fi
        else
            if ! sudo rpm-ostree install -yA "$nonfree_url"; then
                echo "Error: Failed to install RPMFusion Non-Free repository via rpm-ostree"
                return 1
            fi
        fi
        echo "RPMFusion Non-Free repository installed successfully"
    else
        echo "RPMFusion Non-Free repository is already installed"
    fi
    return 0
}

# install PyPI
pip_lib () {
    if [[ "$ID" =~ ^(arch|cachyos)$ ]] || [[ "$ID_LIKE" == *arch* ]] || [[ "$ID_LIKE" == *archlinux* ]]; then
        _packages=(python-pip python-pipx)
    else
        _packages=(python3-pip pipx)
    fi 
    _install_
}