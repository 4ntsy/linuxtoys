## linuxtoys optimizers lib -- scripts need to source linuxtoys.lib BEFORE calling this lib

# cachyos safe systemd configs
cachyos_sysd_lib () {
    local _cfgsource="https://raw.githubusercontent.com/CachyOS/CachyOS-Settings/master/usr"
    mkdir -p sysctl-config
    sleep 1
    cd sysctl-config
    {
        echo "${_cfgsource}/lib/udev/rules.d/20-audio-pm.rules"
        echo "${_cfgsource}/lib/udev/rules.d/40-hpet-permissions.rules"
        echo "${_cfgsource}/lib/udev/rules.d/50-sata.rules"
        echo "${_cfgsource}/lib/udev/rules.d/60-ioschedulers.rules"
        echo "${_cfgsource}/lib/udev/rules.d/69-hdparm.rules"
        echo "${_cfgsource}/lib/udev/rules.d/99-cpu-dma-latency.rules"
        } > "udev.txt"
    {
        echo "${_cfgsource}/lib/tmpfiles.d/coredump.conf"
        echo "${_cfgsource}/lib/tmpfiles.d/thp-shrinker.conf"
        echo "${_cfgsource}/lib/tmpfiles.d/thp.conf"
        } > "tmpfiles.txt"
    {
        echo "${_cfgsource}/lib/modprobe.d/20-audio-pm.conf"
        echo "${_cfgsource}/lib/modprobe.d/amdgpu.conf"
        echo "${_cfgsource}/lib/modprobe.d/blacklist.conf"
        echo "${_cfgsource}/lib/modprobe.d/nvidia.conf"
        } > "modprobe.txt"
    {
        echo "${_cfgsource}/lib/sysctl.d/99-cachyos-settings.conf"
        echo "${_cfgsource}/lib/systemd/journald.conf.d/00-journal-size.conf"
        echo "${_cfgsource}/share/X11/xorg.conf.d/20-touchpad.conf"
        } > "other.txt"
    sleep 1
    while read -r url; do wget -P udev "$url"; done < udev.txt
    while read -r url; do wget -P tmpfiles "$url"; done < tmpfiles.txt
    while read -r url; do wget -P modprobe "$url"; done < modprobe.txt
    while read -r url; do wget "$url"; done < other.txt
    sleep 1
    sudo cp -rf udev/* /usr/lib/udev/rules.d/
    sudo cp -rf tmpfiles/* /usr/lib/tmpfiles.d/
    sudo cp -rf modprobe/* /usr/lib/modprobe.d/
    sudo cp -f 99-cachyos-settings.conf /usr/lib/sysctl.d/
    sudo cp -f 00-journal-size.conf /usr/lib/systemd/journald.conf.d/
    sudo cp -f 20-touchpad.conf /usr/share/X11/xorg.conf.d/
    cd ..
    rm -rf sysctl-config
}

# shader booster
sboost_lib () {
    cd $HOME
    if [ "$ID" == "cachyos" ]; then
        wget https://github.com/psygreg/shader-booster/releases/latest/download/patcher-cachy.fish
        chmod +x patcher-cachy.fish
        fish ./patcher-cachy.fish
        rm patcher-cachy.fish
    else
        wget https://github.com/psygreg/shader-booster/releases/latest/download/patcher.sh
        chmod +x patcher.sh
        ./patcher.sh
        rm patcher.sh
    fi
}

# split lock mitigation disabler
dsplitm_lib () {
    if [ ! -f /etc/sysctl.d/99-splitlock.conf ]; then
        echo 'kernel.split_lock_mitigate=0' | sudo tee /etc/sysctl.d/99-splitlock.conf >/dev/null
        zeninf "$msg022"
    else
        zeninf "$msg043"
    fi
}

# power optimizer for laptops
psave_lib () {
    if [[ "$ID" != "cachyos" ]]; then
        sudo_rq
        if command -v rpm-ostree &>/dev/null; then
            wget https://copr.fedorainfracloud.org/coprs/leo/power-options/repo/fedora-$(rpm -E %fedora)/leo-power-options-fedora-$(rpm -E %fedora).repo
            sudo install -o 0 -g 0 leo-power-options-fedora-$(rpm -E %fedora).repo /etc/yum.repos.d/leo-power-options-fedora-$(rpm -E %fedora).repo
            rpm-ostree refresh-md
            rm leo-power-options-fedora-$(rpm -E %fedora).repo
            sudo rpm-ostree install power-options
        else
            if [[ "$ID_LIKE" == *debian* ]] || [[ "$ID_LIKE" == *ubuntu* ]] || [ "$ID" == "debian" ] || [ "$ID" == "ubuntu" ]; then
                _packages=(libgtk4-dev libadwaita-1-dev)
            elif [[ "$ID" =~ "arch" ]] || [[ "$ID_LIKE" == *arch* ]] || [[ "$ID_LIKE" == *archlinux* ]]; then
                _packages=(gtk4 libadwaita)
            elif [[ "$ID_LIKE" =~ (rhel|fedora) ]] || [[ "$ID" =~ (fedora) ]] || [[ "$ID_LIKE" == *suse* ]] || [[ "$ID" == *suse* ]]; then
                _packages=(gtk4-devel libadwaita-devel)
            fi
            _install_
            git clone https://github.com/TheAlexDev23/power-options/ --depth=1
            cd power-options/scripts
            chmod +x *.sh
            if ! which power-options &>/dev/null; then
                ./install-gtk.sh
                ./install-tray.sh
                ./setup.sh
            else
                ./update.sh
            fi
        fi
        zeninf "$msg036"
    else
        zenwrn "$msg286"
    fi
}

# patcher for debian testing
debfixer_lib () {
    local codename=$(lsb_release -sc 2>/dev/null || grep VERSION_CODENAME /etc/os-release | cut -d= -f2)
    if [ "$ID" == "debian" ]; then
        if ! su -c 'grep -q "^${USER} ALL=(ALL:ALL) ALL" /etc/sudoers'; then
            su -c "sed -i '\|^root[[:space:]]\\+ALL=(ALL:ALL)[[:space:]]\\+ALL$|a ${USER} ALL=(ALL:ALL) ALL' /etc/sudoers"
            sleep 1
        fi
    fi
}

# EarlyOOM - kills processes before a OOM event is triggered
earlyoom_lib () {
    _packages=(earlyoom)
    _install_
    wget https://raw.githubusercontent.com/psygreg/linuxtoys/refs/heads/master/resources/earlyoom
    sudo cp -f earlyoom /etc/default/
    rm earlyoom
    sudo systemctl enable --now earlyoom
    unset _packages
}

# Powerprofiler - set default profile to 'ondemand'
pp_ondemand () {
    if [[ "$ID" != "cachyos" ]]; then
        # Check if intel_pstate is active
        if grep -q intel_pstate /sys/devices/system/cpu/cpu0/cpufreq/scaling_driver 2>/dev/null; then
            echo "Intel P-State driver detected. Disabling to enable ondemand governor..."
            local pstate_disabler="1"
            if command -v rpm-ostree &>/dev/null; then
                sudo rpm-ostree kargs --append=intel_pstate=disable
            else
                # Create kernel cmdline drop-in file for systemd-based systems
                sudo mkdir -p /etc/kernel/cmdline.d
                echo "intel_pstate=disable" | sudo tee /etc/kernel/cmdline.d/10-intel-pstate-disable.conf >/dev/null
                
                # Also create GRUB drop-in config for GRUB-based systems
                sudo mkdir -p /etc/default/grub.d
                sudo tee /etc/default/grub.d/10-intel-pstate-disable.cfg > /dev/null << 'EOF'
# Disable intel_pstate to enable ondemand governor
# Generated by LinuxToys power profile optimizer
# To remove, delete this file and regenerate boot config
GRUB_CMDLINE_LINUX_DEFAULT="${GRUB_CMDLINE_LINUX_DEFAULT} intel_pstate=disable"
EOF
        
                echo "Created kernel parameter configuration:"
                echo "  - systemd: /etc/kernel/cmdline.d/10-intel-pstate-disable.conf"
                echo "  - GRUB: /etc/default/grub.d/10-intel-pstate-disable.cfg"
        
                if ! is_ostree; then
                    # Update boot configuration
                    if [[ "$ID_LIKE" =~ (rhel|fedora) ]] || [[ "$ID" =~ (fedora) ]] || [[ "$ID_LIKE" == *suse* ]] || [[ "$ID" == *suse* ]]; then
                        sudo grub2-mkconfig -o /boot/grub2/grub.cfg
                        echo "GRUB configuration updated. Reboot required to disable intel_pstate."
                    elif [[ "$ID" =~ ^(arch)$ ]] || [[ "$ID_LIKE" == *arch* ]] || [[ "$ID_LIKE" == *archlinux* ]]; then
                        sudo grub-mkconfig -o /boot/grub/grub.cfg
                        echo "GRUB configuration updated. Reboot required to disable intel_pstate."
                    elif [[ "$ID_LIKE" =~ (ubuntu|debian) ]] || [ "$ID" == "debian" ] || [ "$ID" == "ubuntu" ]; then
                        sudo update-grub
                        echo "GRUB configuration updated. Reboot required to disable intel_pstate."
                    fi
                fi
        
                echo "To remove this configuration later:"
                echo "  sudo rm /etc/kernel/cmdline.d/10-intel-pstate-disable.conf"
                echo "  sudo rm /etc/default/grub.d/10-intel-pstate-disable.cfg"
                echo "  sudo update-grub (or equivalent for your distro)"
            fi
        
        else
            echo "Intel P-State driver not detected or already disabled."
        fi

        # for AMD CPUs (Zen 2 and newer)
        if grep -q amd-pstate-epp /sys/devices/system/cpu/cpu0/cpufreq/scaling_driver 2>/dev/null; then
            sudo tee /etc/systemd/system/set-ondemand-governor.service > /dev/null << 'EOF'
[Unit]
Description=Set CPU governor to ondemand
After=multi-user.target

[Service]
Type=oneshot
ExecStart=/bin/bash -c 'for cpu in /sys/devices/system/cpu/cpu*/cpufreq/energy_performance_preference; do echo balance_performance > "$cpu" 2>/dev/null || true; done'
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
EOF
            sudo systemctl enable set-ondemand-governor.service
            echo "Created systemd service to set ondemand governor on boot."

        # for Intel CPUs
        elif [ -n "$pstate_disabler" ]; then
            sudo tee /etc/systemd/system/set-ondemand-governor.service > /dev/null << 'EOF'
[Unit]
Description=Set CPU governor to ondemand
After=multi-user.target

[Service]
Type=oneshot
ExecStart=/bin/bash -c 'for cpu in /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor; do echo schedutil > "$cpu" 2>/dev/null || true; done'
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
EOF
            sudo systemctl enable set-ondemand-governor.service
            echo "Created systemd service to set ondemand governor on boot."

        else
            echo "Incompatible CPU. No changes were made."
            return 100
        fi
    fi
}

# add video playback with hardware acceleration capabilities to flatpaks
hwaccel_flat_lib () {
    flatpak install --or-update --system --noninteractive flathub org.freedesktop.Platform.ffmpeg-full/x86_64/24.08 org.freedesktop.Platform.ffmpeg-full/x86_64/23.08 org.freedesktop.Platform.ffmpeg-full/x86_64/22.08
}

# for intel and nvidia GPUs, fix GTK rendering bugs
fix_intel_gtk () {
    intelGPU=$(lspci | grep -Ei 'vga|3d' | grep -Ei 'intel')
    nvGPU=$(lspci | grep -i 'nvidia')
    if [[ -n "$intelGPU" ]]; then
        if echo "$intelGPU" | grep -qi 'battlemage'; then
            if ! grep -q "^GSK_RENDERER=" /etc/environment 2>/dev/null; then
                echo "GSK_RENDERER=ngl" | sudo tee -a /etc/environment
            fi
        fi
    fi
    if [[ -n "$nvGPU" ]]; then
        if ! grep -q "^GSK_RENDERER=" /etc/environment 2>/dev/null; then
            echo "GSK_RENDERER=ngl" | sudo tee -a /etc/environment
        fi
    fi
    unset intelGPU
    unset nvGPU
}

# use dnsmasq as a local caching DNS resolver - works generally better than systemd-resolved and fixes download speed issues with Steam
dnsmasq_lib () {
    _packages=(dnsmasq)
    if is_debian; then
        _packages+=(resolvconf)
    fi
    _install_
    # Uncomment lines in dnsmasq.conf for optimal setup
    if [ -f /etc/dnsmasq.conf ]; then
        sudo sed -i 's/^#\s*domain-needed/domain-needed/' /etc/dnsmasq.conf
        sudo sed -i 's/^#\s*bogus-priv/bogus-priv/' /etc/dnsmasq.conf
        sudo sed -i 's/^#\s*bind-interfaces/bind-interfaces/' /etc/dnsmasq.conf
    fi
    sudo systemctl enable dnsmasq
}

# enable intel Xe driver for discrete GPUs
intel_xe_lib () {
    intelGPU=$(lspci | grep -Ei 'vga|3d' | grep -Ei 'intel')
        if [[ -n "$intelGPU" ]]; then
            if echo "$intelGPU" | grep -Eqi 'battlemage|alchemist'; then
                # Extract DEVID from lspci output (e.g., e20b from [8086:e20b])
                DEVID=$(lspci -nnd ::03xx | grep -Ei 'battlemage|alchemist' | sed -n 's/.*\[8086:\([0-9a-f]\+\)\].*/\1/p')
                
                if [[ -z "$DEVID" ]]; then
                    echo "Error: Could not detect Intel GPU device ID"
                    return 1
                fi
                
                echo "Detected Intel GPU device ID: $DEVID"
                if is_ostree; then
                    sudo rpm-ostree kargs --append='i915.force_probe=!'"$DEVID" --append="xe.force_probe=$DEVID"
                else
                    # Create kernel cmdline drop-in file for systemd-based systems
                    sudo mkdir -p /etc/kernel/cmdline.d
                    echo "i915.force_probe=!${DEVID} xe.force_probe=${DEVID}" | sudo tee /etc/kernel/cmdline.d/10-intel-xe-enable.conf >/dev/null
                    
                    # Also create GRUB drop-in config for GRUB-based systems
                    sudo mkdir -p /etc/default/grub.d
                    sudo tee /etc/default/grub.d/10-intel-xe-enable.cfg > /dev/null << EOF
# Enable intel Xe driver for discrete GPUs
# Generated by LinuxToys intel Xe optimizer
# Device ID: $DEVID
# To remove, delete this file and regenerate boot config
GRUB_CMDLINE_LINUX_DEFAULT="\${GRUB_CMDLINE_LINUX_DEFAULT} i915.force_probe=!${DEVID} xe.force_probe=${DEVID}"
EOF
            
                    echo "Created kernel parameter configuration:"
                    echo "  - systemd: /etc/kernel/cmdline.d/10-intel-xe-enable.conf"
                    echo "  - GRUB: /etc/default/grub.d/10-intel-xe-enable.cfg"
            
                    # Update boot configuration
                    if ! is_ostree; then
                        if is_fedora || is_suse; then
                            sudo grub2-mkconfig -o /boot/grub2/grub.cfg
                            echo "GRUB configuration updated. Reboot required to enable Xe driver."
                        elif is_arch || is_cachy; then
                            sudo grub-mkconfig -o /boot/grub/grub.cfg
                            echo "GRUB configuration updated. Reboot required to enable Xe driver."
                        elif is_debian || is_ubuntu; then
                            sudo update-grub
                            echo "GRUB configuration updated. Reboot required to enable Xe driver."
                        fi
                    fi
            
                    echo "To remove this configuration later:"
                    echo "  sudo rm /etc/kernel/cmdline.d/10-intel-xe-enable.conf"
                    echo "  sudo rm /etc/default/grub.d/10-intel-xe-enable.cfg"
                    echo "  sudo update-grub (or equivalent for your distro)"
                fi
            fi
        fi
    unset intelGPU
    # install VDPAU decode driver
    _packages=(libvdpau-va-gl)
    _install_
    if ! grep -q "^VDPAU_DRIVER=" /etc/environment 2>/dev/null; then
        echo "VDPAU_DRIVER=va_gl" | sudo tee -a /etc/environment
    fi
}
